# -*- coding: utf-8 -*-
"""FaceDerection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a27l_0TyjXvyRCagNIjMrsNxnRbIEPva
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd

"""# **Chuẩn bị dữ liệu**"""

import os
import random
import shutil

def split_data(source_dir, train_dir, val_dir, test_dir, split_ratio=(0.7, 0.2, 0.1)):
    # Create directories if they don't exist
    for directory in [train_dir, val_dir, test_dir]:
        if not os.path.exists(directory):
            os.makedirs(directory)

    # Get list of all files in the source directory
    files = os.listdir(source_dir)
    # Shuffle the files
    random.shuffle(files)

    # Calculate split indices
    total_files = len(files)
    train_split = int(total_files * split_ratio[0])
    val_split = int(total_files * split_ratio[1])
    test_split = total_files - train_split - val_split

    # Split files into train, val, and test sets
    train_files = files[:train_split]
    val_files = files[train_split:train_split + val_split]
    test_files = files[train_split + val_split:]

    # Copy files to respective directories
    for file in train_files:
        shutil.copy(os.path.join(source_dir, file), os.path.join(train_dir, file))
    for file in val_files:
        shutil.copy(os.path.join(source_dir, file), os.path.join(val_dir, file))
    for file in test_files:
        shutil.copy(os.path.join(source_dir, file), os.path.join(test_dir, file))

# Example usage
source_directory = '/content/drive/MyDrive/dltest/doanchuyenganhcuoi/dataFace/images'
train_directory = '/content/images/train'
val_directory = '/content/images/val'
test_directory = '/content/images/test'

split_data(source_directory, train_directory, val_directory, test_directory)

df=pd.read_csv('/content/drive/MyDrive/dltest/doanchuyenganhcuoi/dataFace/faces.csv')
df['class'] = 'face'
df.columns = ['filename','width','height','xmin','ymin','xmax','ymax','class']
df = df[['filename','class','width', 'height','xmin','ymin','xmax','ymax']]

df.head()

df.shape

df.isnull().sum()

labels_dir = '/content/labels'

# Create the labels directory if it doesn't exist
if not os.path.exists(labels_dir):
    os.makedirs(labels_dir)

# Subdirectories within labels directory
train_dir = os.path.join(labels_dir, 'train')
val_dir = os.path.join(labels_dir, 'val')
test_directory = os.path.join(labels_dir, 'test')
# Create train, val, and test directories within labels directory
for directory in [train_dir, val_dir,test_directory]:
    if not os.path.exists(directory):
        os.makedirs(directory)

train_dir = '/content/images/train'
val_dir = '/content/images/val'
test_directory = '/content/images/test'
# Function to get filenames in a directory
def get_filenames_in_dir(directory):
    return set(os.listdir(directory))

# Get filenames in each directory
train_filenames = get_filenames_in_dir(train_dir)
val_filenames = get_filenames_in_dir(val_dir)
test_filenames = get_filenames_in_dir(test_directory)
# Filter DataFrame based on filenames
train_df = df[df['filename'].isin(train_filenames)]
val_df = df[df['filename'].isin(val_filenames)]
test_df = df[df['filename'].isin(test_filenames)]

def convert_to_yolo(df, output_dir):
    # Create the output directory if it doesn't exist
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Function to convert bounding box coordinates to YOLO format
    def convert_to_yolo_format(width, height, xmin, ymin, xmax, ymax):
        x_center = (xmin + xmax) / (2 * width)
        y_center = (ymin + ymax) / (2 * height)
        box_width = (xmax - xmin) / width
        box_height = (ymax - ymin) / height
        return x_center, y_center, box_width, box_height

    # Loop over the DataFrame and create YOLO format .txt files
    for index, row in df.iterrows():
        filename = row['filename']
        width = row['width']
        height = row['height']
        xmin = row['xmin']
        ymin = row['ymin']
        xmax = row['xmax']
        ymax = row['ymax']

        x_center, y_center, box_width, box_height = convert_to_yolo_format(width, height, xmin, ymin, xmax, ymax)

        # Write YOLO format data to a .txt file
        output_file = os.path.join(output_dir, os.path.splitext(filename)[0] + ".txt")
        with open(output_file, 'w') as f:
            f.write(f"0 {x_center} {y_center} {box_width} {box_height}\n")

    print("YOLO format .txt files created successfully.")


convert_to_yolo(val_df, '/content/labels/val')
convert_to_yolo(train_df, '/content/labels/train')
convert_to_yolo(test_df, '/content/labels/test')

import yaml

data = {
    'train': '/content/images/train',
    'val': '/content/images/val',
    'nc': 1,
    'names': {
        '0': 'face'
    }
}

with open('data.yaml', 'w') as file:
    yaml.dump(data, file, default_flow_style=False)

print("YAML file 'data.yaml' created successfully.")

!pip install ultralytics
!pip install -U ipywidgets

from IPython import display
display.clear_output()

import ultralytics
ultralytics.checks()

from ultralytics import YOLO

from IPython.display import display, Image

model = YOLO("yolov8m.pt")

# Display model information (optional)
model.info()


KQ = model.train(data='/content/data.yaml', epochs=20,imgsz=160,batch=16, patience=5)

"""# Testing"""

from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.patches as patches

testmodel = YOLO("/content/runs/detect/train/weights/best.pt")

def drawbox(image_path):
    img = Image.open(image_path)
    results = testmodel.predict(img)

    fig, ax = plt.subplots(1)
    ax.imshow(img)  # Display the image

    # Loop through all detections
    for r in results:
        # Assuming r.boxes contains all boxes for this particular result, iterate through them
        for box in r.boxes.data.tolist():
            xmin, ymin, xmax, ymax, conf, cls_id = box
            conf = round(conf, 2)
            # Create a Rectangle patch
            rect = patches.Rectangle((xmin, ymin), xmax-xmin, ymax-ymin, linewidth=1, edgecolor='r', facecolor='none')
            ax.add_patch(rect)
            # Annotate the image with confidence
            ax.text(xmin, ymin, f'Conf: {conf}', bbox=dict(facecolor='white', alpha=0.5))

    plt.show()

drawbox('/content/images/val/00000003.jpg')

drawbox('/content/images/val/00000496.jpg')

model.export(format="onnx")

model.export(format="tflite")

from PIL import Image, ImageDraw
import matplotlib.pyplot as plt

# Initialize the YOLO model
testmodel = YOLO("/content/runs/detect/train/weights/best.pt")

def load_ground_truth_labels(label_dir):
    labels = {}
    for label_file in os.listdir(label_dir):
        if label_file.endswith('.txt'):
            label_path = os.path.join(label_dir, label_file)
            with open(label_path, 'r') as f:
                boxes = []
                for line in f:
                    parts = line.strip().split()
                    cls_id = int(parts[0])
                    x_center, y_center, width, height = map(float, parts[1:])
                    xmin = x_center - width / 2
                    ymin = y_center - height / 2
                    xmax = x_center + width / 2
                    ymax = y_center + height / 2
                    boxes.append([xmin, ymin, xmax, ymax, cls_id])
                labels[label_file.replace('.txt', '.jpg')] = boxes
    return labels

def get_predictions(image_dir):
    predictions = {}
    for image_file in os.listdir(image_dir):
        image_path = os.path.join(image_dir, image_file)
        img = Image.open(image_path)
        results = testmodel.predict(img)
        preds = []
        for r in results:
            for box in r.boxes.data.tolist():
                xmin, ymin, xmax, ymax, conf, cls_id = box
                preds.append([xmin, ymin, xmax, ymax, conf, cls_id])
        predictions[image_file] = preds
    return predictions

def drawbox(image_path, ground_truth, predictions):
    img = Image.open(image_path)
    draw = ImageDraw.Draw(img)

    # Draw ground truth boxes in green
    for box in ground_truth:
        xmin, ymin, xmax, ymax, cls_id = box
        draw.rectangle([xmin, ymin, xmax, ymax], outline="green", width=2)
        draw.text((xmin, ymin), f"GT: {cls_id}", fill="green")

    # Draw predicted boxes in red
    for box in predictions:
        xmin, ymin, xmax, ymax, conf, cls_id = box
        draw.rectangle([xmin, ymin, xmax, ymax], outline="red", width=2)
        draw.text((xmin, ymin), f"Pred: {cls_id} ({conf:.2f})", fill="red")

    plt.figure(figsize=(10, 10))
    plt.imshow(img)
    plt.show()

# Load ground truth labels
ground_truth_labels = load_ground_truth_labels('/content/labels/test')

# Get model predictions
predictions = get_predictions('/content/images/test')

# Draw boxes for a few images
for image_file in os.listdir('/content/images/test')[:12]:  # Limit to 5 images for display
    image_path = os.path.join('/content/images/test', image_file)
    gt_boxes = ground_truth_labels.get(image_file, [])
    pred_boxes = predictions.get(image_file, [])
    drawbox(image_path, gt_boxes, pred_boxes)